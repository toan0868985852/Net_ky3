* Xoá database : PM> dotnet ef database drop --force --context StoreDbContext 
		     dotnet ef database drop --project <Tên project>--force --context StoreDbContext
* Xóa migrations: b1: dotnet ef database drop --project AhihiStore --force --context StoreDbContext
		  b2: dotnet ef migrations remove
		  b3: dotnet ef migrations add Initial
Bước 1 : Add using  AhihiStore.Models (Hiển thị sản phẩm)
	 private IStoreRepository repository;
	 
	 public HomeController(IStoreRepository repo)
        {
            repository = repo;
        }
 	 public IActionResult Index() => View(repository.Products); 
	=> HomeControllers.cs 
Bước 2 : Add using System.Linq;(Phân trang)

	 public int PageSize = 4;

	 public IActionResult Index(int productPage = 1)
            => View(repository.Products
                .OrderBy(p => p.ProductID)
                .Skip((productPage - 1) * PageSize)
                .Take(PageSize)
            );
	=> HomeControllers.cs 

Bước 3 : Create PagingInfo (folder ViewModels) => folder Models
	//Tag Helper
	public int TotalItems { get; set; } //tổng số mặt hàng
        public int ItemsPerPage { get; set; }
        public int CurrentPage { get; set; }  //Trang hiện tại

        public int TotalPages => (int)Math.Ceiling((decimal)TotalItems/ItemsPerPage); //tổng số trang

Bước 4 : //Tag Helpers
	 Create folder Infrastructure -> PageLinkTagHelper.cs
	 using Microsoft.AspNetCore.Mvc;
	 using Microsoft.AspNetCore.Mvc.Rendering;
	 using Microsoft.AspNetCore.Mvc.Routing;
	 using Microsoft.AspNetCore.Mvc.ViewFeatures;
	 using Microsoft.AspNetCore.Razor.TagHelpers;
	 using AhihiStore.Models.ViewModels;

	 [HtmlTargetElement("div", Attributes="page-model")]
    	 public class PageLinkTagHelper : TagHelper
    	 {
        	private IUrlHelperFactory urlHelperFactory;

        	public PageLinkTagHelper(IUrlHelperFactory helperFactory)
        	{
            		urlHelperFactory = helperFactory;
        	}

        	[ViewContext]
        	[HtmlAttributeNotBound]
        	public ViewContext ViewContext { get; set; }
	 	public PagingInfo PageModel { get; set; }
        	public string PageAction { get; set; }
        	public override void Process(TagHelperContext context, TagHelperOutput output)
        	{
            		IUrlHelper urlHelper = urlHelperFactory.GetUrlHelper(ViewContext);
			TagBuilder result = new TagBuilder("div");
            		for(int i = 1;i <= PageModel.TotalPages; i++)
            		{
                		TagBuilder tag = new TagBuilder("a");
                		tag.Attributes["href"] = urlHelper.Action(PageAction, new
                		{
                    			productPage = i
                		});
				tag.InnerHtml.Append(i.ToString());
				result.InnerHtml.AppendHtml(tag);
            		}
			output.Content.AppendHtml(result.InnerHtml);
        	}
    	 }
Bước 5 : Add using AhihiStore.Models.ViewModels => _ViewImports.cshtml(folder View)
	@using DrinkStores
	@using DrinkStores.Models
	@using DrinkStores.Models.ViewModels;
	@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
	@addTagHelper *, DrinkStores
	 

Bước 6 :  Create ProductsListViewModel => folder ViewModels // Tạo View Model Data 

	  public IEnumerable<Product> Products { get; set; }
          public PagingInfo PagingInfo { get; set; }
Bước 7 : Add using AhihiStore.Models.ViewModels; 
	 Edit:
		pprivate IStoreRepository repository;
        public int PageSize = 4;

        public HomeController(IStoreRepository repo)
        {
            repository = repo;
        }

        //public ViewResult Index(int drinkPage = 1)
        //    => View(repository.Drinks
        //        .OrderBy(p => p.DrinkID)
        //        .Skip((drinkPage - 1) * PageSize)
        //        .Take(PageSize)
        //        );

        public ViewResult Index(int productpage = 1)
            => View(new ProductsListViewModel
            {
                Drinks = repository.Drinks
                .OrderBy(p => p.DrinkID)
                .Skip((productpage - 1) * PageSize)
                .Take(PageSize),
                PagingInfo = new PagingInfo
                {
                    CurrentPage = productpage,
                    ItemsPerPage = PageSize,
                    TotalItems = repository.Drinks.Count()
                }
            });
	 => HomeController.cs  	
Bước 8 : add @model ProductsListViewModel //comment @model IQueryable<Product>	
	 edit @foreach (var p in Model.Products)
	 <div page-model="@Model.PagingInfo" page-action="Index"></div>
	 => Index.cshtml
*Nếu muốn sửa lại route để thay cho route mặc định
vào startup
app.UseEndpoints(endpoints =>
            {
                //endpoints.MapControllerRoute(
                //    name: "default",
                //    pattern: "{controller=Home}/{action=Index}/{id?}");
                endpoints.MapControllerRoute(
                    "pagination", "Drinks/Page{drinkPage}",
                    new { Controller = "Home", action = "Index" });
                endpoints.MapDefaultControllerRoute();
            });

bước 9 cài đặt thư viện
xóa thư viện có sẵn
dotnet tool uninstall --global Microsoft.Web.LibraryManager.Cli

cài thư viện có sẵn
dotnet tool install --global microsoft.web.librarymanager.cli

bước 10: cài đặt bootstrap
libman init -p cdnjs
libman install twitter-bootstrap@4.3.1 -d wwwroot/lib/twitter-bootstrap

bước 11: sửa lại file layout thêm bootstrap
bước 12: sửa lại file index thêm bootstrap

Bước 13:
thêm đoạn này vào trong PageLinkTagHelper.cs

	public bool PageClassesEnabled { get; set; } = false;

        public string PageClass { get; set; }

        public string PageClassNormal { get; set; }

        public string PageClassSelected { get; set; }


đoạn code này là để hiển thị màu cho nút phân trang trong index

Bước 14 sử dụng razor component để hiển thị
trong view -> shared tạo file view
copy đoạn code trong vòng lặp for của file index vào file ProductsSummary

Bước 15: sửa file index
 @foreach (var p in Model.Drinks)
            {
                <partial name="ProductsSummary" model="p"/>
                //p được truyền sang ProductsSummary bằng model
            }
 

Bước 16: trong productlistviewmodel 

 	public IEnumerable<Drink> Drinks { get; set; }
        public PagingInfo PagingInfo { get; set; }
        //thông tin về việc phân loại sản phẩm
        public string CurrentCategory { get; set; }

bước 17: trong homecontroller sửa
 public ViewResult Index(string category, int drinkPage = 1)
            => View(new ProductsListViewModel
            {
                Drinks = repository.Drinks
                .Where(p => category == null || p.Status == category)
                .OrderBy(p => p.DrinkID)
                .Skip((drinkPage - 1) * PageSize)
                .Take(PageSize),
                PagingInfo = new PagingInfo
                {
                    CurrentPage = drinkPage,
                    ItemsPerPage = PageSize,
                    TotalItems = repository.Drinks.Count()
                }
            });

bước 18: sửa route trong startup thêm đường dẫn
các cách phân loại đồ uống theo từng route khác nhau		

		
 		endpoints.MapControllerRoute(
                    "catpage", "{category}/Page{drinkPage:int}",
                    new { Controller = "Home", action = "Index" });

		
                endpoints.MapControllerRoute(
                    "page", "Page{drinkPage:int}",
                    new { Controller = "Home", action = "Index" , drinkPage = 1});

                endpoints.MapControllerRoute(
                  "category", "{category}",
                   new { Controller = "Home", action = "Index", drinkPage = 1 });

                ///chỉ phân trang
                endpoints.MapControllerRoute(
                   "pagination", "Drinks/Page{drinkPage}",
                   new { Controller = "Home", action = "Index", drinkPage = 1 });

và test theo từng đường dẫn trên trình duyệt

Bước 19: trong PagelinkTagHelper thêm 
	[HtmlAttributeName(DictionaryAttributePrefix = "page-url")]

        public Dictionary<string, object> PageUrlValues { get; set; }
        = new Dictionary<string, object>();

	....................
	
	TagBuilder tag = new TagBuilder("a");
                PageUrlValues["drinkPage"] = i;
                tag.Attributes["href"] = urlHelper.Action(PageAction, PageUrlValues);

                //tag.Attributes["href"] = urlHelper.Action(PageAction, new
                //{
                //    drinkPage = i
                //});

Bước 20: sửa Index
	<div page-model="@Model.PagingInfo" page-action="Index" 
             page-classes-enabled="true"
             page-class="btn" page-class-normal="btn-outline-dark"
             page-class-selected="btn-primary" 
             page-url-category="@Model.CurrentCategory"
             class="btn-group pull-right m-1"></div>

Bước 21: Tạo foder components --> NavigationMenuViewComponents để có thể sử dụng lại 



Bước 22: nếu muốn sử dụng view conponents trong _layout thêm 
	<div id="categories" class="col-3" style="background-color: #ff6a00">
            @*Put something usefull here later*@
            <vc:navigation-menu-view-components />
        </div>

Bước 23: suawe file NavigationMenuViewComponents 
public class NavigationMenuViewComponents : ViewComponent
    {

        private IStoreRepository repository;

        public NavigationMenuViewComponents(IStoreRepository repo)
        {
            repository = repo;
        }

        public IViewComponentResult Invoke()
        {
            return View(repository.Drinks
                .Select(x => x.Status)
                .Distinct()
                .OrderBy(x => x));
        }
    }

Bước 23: trong share->NavigationMenuViewComponents -> Default
@model IEnumerable<string>

<a class="btn btn-block btn-outline-secondary"
   asp-action="Index"
   asp-controller="Home"
   asp-route-category="">Home</a>

@foreach (string category in Model)
{
    <a class="btn btn-block btn-outline-secondary"
       asp-action="Index"
       asp-controller="Home"
       asp-route-category="@category"
       asp-route-drinkPage="1">@category</a>
}

