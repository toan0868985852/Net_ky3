* Xoá database : PM> dotnet ef database drop --force --context StoreDbContext 
		     dotnet ef database drop --project <Tên project>--force --context StoreDbContext
* Xóa migrations: b1: dotnet ef database drop --project AhihiStore --force --context StoreDbContext
		  b2: dotnet ef migrations remove
		  b3: dotnet ef migrations add Initial
* chú ý : khi tạo xong một class phải nhấn ctrl + shift + B

Bước 1 : Add using  AhihiStore.Models (Hiển thị sản phẩm)

	 private IStoreRepository repository;
	 
	 public HomeController(IStoreRepository repo)
        {
            repository = repo;
        }
 	 public IActionResult Index() => View(repository.Products); 
	=> HomeControllers.cs 
Bước 2 : Add using System.Linq;(Phân trang)

	 public int PageSize = 4;

	 public IActionResult Index(int productPage = 1)
            => View(repository.Products
                .OrderBy(p => p.ProductID)
                .Skip((productPage - 1) * PageSize)
                .Take(PageSize)
            );
	=> HomeControllers.cs 

Bước 3 : Create PagingInfo (folder ViewModels) => folder Models
	//Tag Helper
	public int TotalItems { get; set; } //tổng số mặt hàng
        public int ItemsPerPage { get; set; }
        public int CurrentPage { get; set; }  //Trang hiện tại

        public int TotalPages => (int)Math.Ceiling((decimal)TotalItems/ItemsPerPage); //tổng số trang

Bước 4 : //Tag Helpers
	 Create folder Infrastructure -> PageLinkTagHelper.cs
	 using Microsoft.AspNetCore.Mvc;
	 using Microsoft.AspNetCore.Mvc.Rendering;
	 using Microsoft.AspNetCore.Mvc.Routing;
	 using Microsoft.AspNetCore.Mvc.ViewFeatures;
	 using Microsoft.AspNetCore.Razor.TagHelpers;
	 using AhihiStore.Models.ViewModels;

	 [HtmlTargetElement("div", Attributes="page-model")]
    	 public class PageLinkTagHelper : TagHelper
    	 {
        	private IUrlHelperFactory urlHelperFactory;

        	public PageLinkTagHelper(IUrlHelperFactory helperFactory)
        	{
            		urlHelperFactory = helperFactory;
        	}

        	[ViewContext]
        	[HtmlAttributeNotBound]
        	public ViewContext ViewContext { get; set; }
	 	public PagingInfo PageModel { get; set; }
        	public string PageAction { get; set; }
        	public override void Process(TagHelperContext context, TagHelperOutput output)
        	{
            		IUrlHelper urlHelper = urlHelperFactory.GetUrlHelper(ViewContext);
			TagBuilder result = new TagBuilder("div");
            		for(int i = 1;i <= PageModel.TotalPages; i++)
            		{
                		TagBuilder tag = new TagBuilder("a");
                		tag.Attributes["href"] = urlHelper.Action(PageAction, new
                		{
                    			productPage = i
                		});
				tag.InnerHtml.Append(i.ToString());
				result.InnerHtml.AppendHtml(tag);
            		}
			output.Content.AppendHtml(result.InnerHtml);
        	}
    	 }
Bước 5 : Add using AhihiStore.Models.ViewModels => _ViewImports.cshtml(folder View)
	@using DrinkStores
	@using DrinkStores.Models
	@using DrinkStores.Models.ViewModels;
	@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
	@addTagHelper *, DrinkStores
	 

Bước 6 :  Create ProductsListViewModel => folder ViewModels // Tạo View Model Data 

	  public IEnumerable<Product> Products { get; set; }
          public PagingInfo PagingInfo { get; set; }
Bước 7 : Add using AhihiStore.Models.ViewModels; 
	 Edit:
		pprivate IStoreRepository repository;
        public int PageSize = 4;

        public HomeController(IStoreRepository repo)
        {
            repository = repo;
        }

        //public ViewResult Index(int drinkPage = 1)
        //    => View(repository.Drinks
        //        .OrderBy(p => p.DrinkID)
        //        .Skip((drinkPage - 1) * PageSize)
        //        .Take(PageSize)
        //        );

        public ViewResult Index(int productpage = 1)
            => View(new ProductsListViewModel
            {
                Drinks = repository.Drinks
                .OrderBy(p => p.DrinkID)
                .Skip((productpage - 1) * PageSize)
                .Take(PageSize),
                PagingInfo = new PagingInfo
                {
                    CurrentPage = productpage,
                    ItemsPerPage = PageSize,
                    TotalItems = repository.Drinks.Count()
                }
            });
	 => HomeController.cs  	
Bước 8 : add @model ProductsListViewModel //comment @model IQueryable<Product>	
	 edit @foreach (var p in Model.Products)
	 <div page-model="@Model.PagingInfo" page-action="Index"></div>
	 => Index.cshtml
*Nếu muốn sửa lại route để thay cho route mặc định
vào startup
app.UseEndpoints(endpoints =>
            {
                //endpoints.MapControllerRoute(
                //    name: "default",
                //    pattern: "{controller=Home}/{action=Index}/{id?}");
                endpoints.MapControllerRoute(
                    "pagination", "Drinks/Page{drinkPage}",
                    new { Controller = "Home", action = "Index" });
                endpoints.MapDefaultControllerRoute();
            });

bước 9 cài đặt thư viện
xóa thư viện có sẵn
dotnet tool uninstall --global Microsoft.Web.LibraryManager.Cli

cài thư viện có sẵn
dotnet tool install --global microsoft.web.librarymanager.cli

bước 10: cài đặt bootstrap
libman init -p cdnjs
libman install twitter-bootstrap@4.3.1 -d wwwroot/lib/twitter-bootstrap

bước 11: sửa lại file layout thêm bootstrap
bước 12: sửa lại file index thêm bootstrap

Bước 13:
thêm đoạn này vào trong PageLinkTagHelper.cs

	public bool PageClassesEnabled { get; set; } = false;

        public string PageClass { get; set; }

        public string PageClassNormal { get; set; }

        public string PageClassSelected { get; set; }


đoạn code này là để hiển thị màu cho nút phân trang trong index

Bước 14 sử dụng razor component để hiển thị
trong view -> shared tạo file view
copy đoạn code trong vòng lặp for của file index vào file ProductsSummary

Bước 15: sửa file index
 @foreach (var p in Model.Drinks)
            {
                <partial name="ProductsSummary" model="p"/>
                //p được truyền sang ProductsSummary bằng model
            }
 

Bước 16: trong productlistviewmodel 

 	public IEnumerable<Drink> Drinks { get; set; }
        public PagingInfo PagingInfo { get; set; }
        //thông tin về việc phân loại sản phẩm
        public string CurrentCategory { get; set; }

bước 17: trong homecontroller sửa
 public ViewResult Index(string category, int drinkPage = 1)
            => View(new ProductsListViewModel
            {
                Drinks = repository.Drinks
                .Where(p => category == null || p.Status == category)
                .OrderBy(p => p.DrinkID)
                .Skip((drinkPage - 1) * PageSize)
                .Take(PageSize),
                PagingInfo = new PagingInfo
                {
                    CurrentPage = drinkPage,
                    ItemsPerPage = PageSize,
                    TotalItems = repository.Drinks.Count()
                }
            });

bước 18: sửa route trong startup thêm đường dẫn
các cách phân loại đồ uống theo từng route khác nhau		

		
 		endpoints.MapControllerRoute(
                    "catpage", "{category}/Page{drinkPage:int}",
                    new { Controller = "Home", action = "Index" });

		
                endpoints.MapControllerRoute(
                    "page", "Page{drinkPage:int}",
                    new { Controller = "Home", action = "Index" , drinkPage = 1});

                endpoints.MapControllerRoute(
                  "category", "{category}",
                   new { Controller = "Home", action = "Index", drinkPage = 1 });

                ///chỉ phân trang
                endpoints.MapControllerRoute(
                   "pagination", "Drinks/Page{drinkPage}",
                   new { Controller = "Home", action = "Index", drinkPage = 1 });

và test theo từng đường dẫn trên trình duyệt

Bước 19: trong PagelinkTagHelper thêm 
	[HtmlAttributeName(DictionaryAttributePrefix = "page-url")]

        public Dictionary<string, object> PageUrlValues { get; set; }
        = new Dictionary<string, object>();

	....................
	
	TagBuilder tag = new TagBuilder("a");
                PageUrlValues["drinkPage"] = i;
                tag.Attributes["href"] = urlHelper.Action(PageAction, PageUrlValues);

                //tag.Attributes["href"] = urlHelper.Action(PageAction, new
                //{
                //    drinkPage = i
                //});

Bước 20: sửa Index
	<div page-model="@Model.PagingInfo" page-action="Index" 
             page-classes-enabled="true"
             page-class="btn" page-class-normal="btn-outline-dark"
             page-class-selected="btn-primary" 
             page-url-category="@Model.CurrentCategory"
             class="btn-group pull-right m-1"></div>

Bước 21: Tạo foder components --> NavigationMenuViewComponents để có thể sử dụng lại 



Bước 22: nếu muốn sử dụng view conponents trong _layout thêm 
	<div id="categories" class="col-3" style="background-color: #ff6a00">
            @*Put something usefull here later*@
            <vc:navigation-menu-view-components />
        </div>

Bước 23: suawe file NavigationMenuViewComponents 
public class NavigationMenuViewComponents : ViewComponent
    {

        private IStoreRepository repository;

        public NavigationMenuViewComponents(IStoreRepository repo)
        {
            repository = repo;
        }

        public IViewComponentResult Invoke()
        {
            return View(repository.Drinks
                .Select(x => x.Status)
                .Distinct()
                .OrderBy(x => x));
        }
    }

Bước 23: trong share->NavigationMenuViewComponents -> Default
@model IEnumerable<string>

<a class="btn btn-block btn-outline-secondary"
   asp-action="Index"
   asp-controller="Home"
   asp-route-category="">Home</a>

@foreach (string category in Model)
{
    <a class="btn btn-block btn-outline-secondary"
       asp-action="Index"
       asp-controller="Home"
       asp-route-category="@category"
       asp-route-drinkPage="1">@category</a>
}

Bước 24: thêm đoạn code để phân trang theo category sẽ có bao nhiêu sản phẩm một trang
nếu category đó có 3 sản phẩm thì đó là một trang 
còn nếu có nhiều hơn 3 sản phẩm thì sẽ tùy số lượng sản phẩm

public ViewResult Index(string category, int drinkPage = 1)
            => View(new ProductsListViewModel
            {
                Drinks = repository.Drinks
                .Where(p => category == null || p.Status == category)
                .OrderBy(p => p.DrinkID)
                .Skip((drinkPage - 1) * PageSize)
                .Take(PageSize),
                PagingInfo = new PagingInfo
                {
                    CurrentPage = drinkPage,
                    ItemsPerPage = PageSize,
                    //TotalItems = repository.Drinks.Count()
                    TotalItems = category == null ?
                    repository.Drinks.Count() : 
                    repository.Drinks.Where(
                        e => e.Status == category).Count()
                },
                CurrentCategory = category
            });
Bước 25: Tạo ra giỏ hàng
-trong startup

thêm vào ConfigureServices đoạn code là: services.AddRazorPages();
thêm vào Configure -> UseEndpoints đoạn code là:  endpoints.MapRazorPages();

Bước 26: trong solution thêm thư mục Pages
- trong Pages tạo -> _ViewImports.cshtml
trong Razor view imports thêm đoạn code

@namespace DrinkStores.Pages
@using Microsoft.AspNetCore.Mvc.RazorPages
@using DrinkStores.Models
@using DrinkStores.Infrastructure
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

- trong Pages tạo -> _ViewStart.cshtml

@{
    Layout = "_Layout";
}

- trong Pages tạo Razor layout đặt tên là -> _CartLayout.cshtml

- trong Pages tạo -> Razor Page đặt tên là Cart.cshtml

Bước 27: trong Infrastructure thêm UrlExtensions.cs thêm đoạn code

 public static class UrlExtensions
    {
        public static string PathAndQuery(this HttpRequest request)
            => request.QueryString.HasValue
            ? $"{request.Path}{request.QueryString}"
            : request.Path.ToString();
    }

Bước 28: trong View -> ViewImports
thêm đoạn code @using DrinkStores.Infrastructure

Bước 29: trong View -> Shared -> ProductSumary.cshtml

sửa :
<div class="products">
        <h3 class="title">@Model.Name</h3>
        <img class="img" src="~/Img/@Model.Image" width="300" height="300">
        <div class="text">
            <div class="Description">@Model.Description</div>
            <span class="badge badge-pill badge-primary" style="float: right">
                <small>@Model.Price.ToString("c")</small>
            </span>
        </div>
        <form method="post" asp-page="/Cart" id="@Model.DrinkID">
            <input type="hidden" asp-for="DrinkID" />
            <input type="hidden" name="returnUrl"
                   value="@ViewContext.HttpContext.Request.PathAndQuery()" />
            <span class="card-text p-1">
                @Model.Description
                <button type="submit" class="btn btn-success btn-sm pull-right" style="float:right">
                    Add To Cart
                </button>
            </span>
        </form>
    </div>

Bước 30: trong startup thêm đoạn code vào ConfigureServices

 	    services.AddDistributedMemoryCache();
            services.AddSession();

 -  trong startup thêm đoạn code vào Configure

 	app.UseSession();

Bước 31: trong model -> Cart

public class Cart
    {
        public List<CartLine> Lines { get; set; } = new List<CartLine>();

        public void AddItem(Drink drink, int quantity)
        {
            CartLine line = Lines
                .Where(p => p.Drink.DrinkID == drink.DrinkID)
                .FirstOrDefault();
            if(line == null)
            {
                Lines.Add(new CartLine
                {
                    Drink = drink,
                    Quantity = quantity
                });
            }
            else
            {
                line.Quantity += quantity;
            }
        }

        public void RemoveLine(Drink drink)
            => Lines.RemoveAll(l => l.Drink.DrinkID == drink.DrinkID);

        public decimal ComputeTotalValue()
            => Lines.Sum(e => e.Drink.Price * e.Quantity);

        public void Clear()
            => Lines.Clear();
    }

    public class CartLine
    {
        public int CartLineID { get; set; }
        public Drink Drink { get; set; }
        public int Quantity { get; set; }
    }

Bước 32 trong Infrastructure -> sessionExtention.cs

    public static class SessionExtensions
    {
        public static void SetJson(this ISession session, string key, object value)
        {
            session.SetString(key, JsonSerializer.Serialize(value));
        }
        public static T GetJson<T>(this ISession session, string key)
        {
            var sessionData = session.GetString(key);
            return sessionData == null
                ? default(T) : JsonSerializer.Deserialize<T>(sessionData);
        }
    }

Bước 33: trong Model -> Pages -> Cart.cshtml

@model CartModel

<h2>Your Cart</h2>

<table class="table table-bordered table-striped">
    <thead>
        <tr>
            <th>Quantity</th>
            <th>Item</th>
            <th class="text-right">Price</th>
            <th class="text-right">Subtotal</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var line in Model.Cart.Lines)
        {
            <tr>
                <td class="text-center">@line.Quantity</td>
                <td class="text-left">@line.Drink.Name</td>
                <td class="text-right">@line.Drink.Price.ToString("c")</td>
                <td class="text-right">@((line.Quantity*line.Drink.Price).ToString("c"))</td>
            </tr>
        }
    </tbody>
    <tfoot>
        <tr>
            <td colspan="3" class="text-right">Total:</td>
            <td class="text-right">@Model.Cart.ComputeTotalValue().ToString("c")</td>
        </tr>
    </tfoot>
</table>

<div class="text-center">
    <a class="btn btn-primary" href="@Model.ReturnUrl">Continue shopping</a>
</div>

Bước 34: trong Model -> Pages -> Cart.cshtml -> Cart.cshtml.cs

public class CartModel : PageModel
    {

        private IStoreRepository repository;
        public CartModel(IStoreRepository repo)
        {
            repository = repo;
        }

        public Cart Cart { get; set; }
        public string ReturnUrl { get; set; }
        public void OnGet(string returnUrl)
        {
            returnUrl = returnUrl ?? "/";
            Cart = HttpContext.Session.GetJson<Cart>("cart") ?? new Cart();
        }

        public IActionResult OnPost(long drinkID, string returnUrl)
        {
            Drink drink = repository.Drinks
                .FirstOrDefault(p => p.DrinkID == drinkID);
            Cart = HttpContext.Session.GetJson<Cart>("cart") ?? new Cart();
            Cart.AddItem(drink, 1);
            HttpContext.Session.SetJson("cart", Cart);
            return RedirectToPage(new { returnUrl = returnUrl });
        }
    }